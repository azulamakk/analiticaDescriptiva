prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI') %>% summarise(n()/(cantXDependencia$cantidad)) %>% arrange(-cantXDependencia$cantidad)
prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI') %>% summarise(n()/(cantXDependencia$cantidad)) %>% arrange(-n()/(cantXDependencia$cantidad))
prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI')
prorrogaXDependencia
prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
prorrogaXDependencia
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, all=TRUE)
combinacionDependencia
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, by=dependencia)
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, by='dependencia')
combinacionDependencia
prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, by='dependencia')
propCProrroga <- combinacionDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.x / cantidad.y) %>% arrange(-incumplimiento)
propCProrroga
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, by='dependencia')
combinacionDependencia
propCProrroga <- combinacionDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(-incumplimiento)
propCProrroga
propCProrroga <- combinacionDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(incumplimiento)
propCProrroga
prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, by='dependencia')
propCProrrogaDependencia <- combinacionDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(incumplimiento)
propCProrrogaDependencia
prorrogaXTipoSolicitante <- acceso_info_publica %>% group_by(tipo_solicitante) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionTipoSolicitante <- merge(x = cantXTipoSolicitante, y = prorrogaXTipoSolicitante, by='tipo_solicitante')
propCProrrogaTipoSolicitante <- combinacionTipoSolicitante %>% group_by(tipo_solicitante) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(incumplimiento)
propCProrrogaTipoSolicitante
prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, by='dependencia')
propCProrrogaDependencia <- combinacionDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaDependencia
prorrogaXTipoSolicitante <- acceso_info_publica %>% group_by(tipo_solicitante) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionTipoSolicitante <- merge(x = cantXTipoSolicitante, y = prorrogaXTipoSolicitante, by='tipo_solicitante')
propCProrrogaTipoSolicitante <- combinacionTipoSolicitante %>% group_by(tipo_solicitante) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaTipoSolicitante
prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, by='dependencia')
propCProrrogaDependencia <- combinacionDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaDependencia
prorrogaXDependenciaMinisterio<- acceso_info_publica %>% group_by(dependencia_ministerio) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependenciaMinisterio <- merge(x = cantXDependenciaMinisterio, y = prorrogaXDependenciaMinisterio, by='dependencia_ministerio')
propCProrrogaDependenciaMinisterio <- combinacionDependenciaMinisterio %>% group_by(dependencia_ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaDependenciaMinisterio
prorrogaXDependenciaMinisterio<- acceso_info_publica %>% group_by(dependencia_ministerio) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependenciaMinisterio <- merge(x = cantXDependenciaMinisterio, y = prorrogaXDependenciaMinisterio, by='dependencia_ministerio')
propCProrrogaDependenciaMinisterio <- combinacionDependenciaMinisterio %>% group_by(dependencia_ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(-incumplimiento) %>% mutate(cantidad.x)
prorrogaXDependenciaMinisterio<- acceso_info_publica %>% group_by(dependencia_ministerio) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependenciaMinisterio <- merge(x = cantXDependenciaMinisterio, y = prorrogaXDependenciaMinisterio, by='dependencia_ministerio')
propCProrrogaDependenciaMinisterio <- combinacionDependenciaMinisterio %>% group_by(dependencia_ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x) %>% arrange(-incumplimiento) %>% mutate(cantidad.x)
propCProrrogaDependenciaMinisterio %>% mutate(cantidad.x)
combinacionDependenciaMinisterio <- merge(x = cantXDependenciaMinisterio, y = prorrogaXDependenciaMinisterio, by='dependencia_ministerio')
propCProrrogaDependenciaMinisterio <- combinacionDependenciaMinisterio %>% group_by(dependencia_ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaDependenciaMinisterio
prorrogaXDependenciaMinisterio<- acceso_info_publica %>% group_by(dependencia_ministerio) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependenciaMinisterio <- merge(x = cantXDependenciaMinisterio, y = prorrogaXDependenciaMinisterio, by='dependencia_ministerio')
propCProrrogaDependenciaMinisterio <- combinacionDependenciaMinisterio %>% group_by(dependencia_ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaDependenciaMinisterio
prorrogaXTipoSolicitante <- acceso_info_publica %>% group_by(tipo_solicitante) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionTipoSolicitante <- merge(x = cantXTipoSolicitante, y = prorrogaXTipoSolicitante, by='tipo_solicitante')
propCProrrogaTipoSolicitante <- combinacionTipoSolicitante %>% group_by(tipo_solicitante) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaTipoSolicitante
prorrogaXTipoSolicitante <- acceso_info_publica %>% group_by(tipo_solicitante) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionTipoSolicitante <- merge(x = cantXTipoSolicitante, y = prorrogaXTipoSolicitante, by='tipo_solicitante')
propCProrrogaTipoSolicitante <- combinacionTipoSolicitante %>% group_by(tipo_solicitante) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal = cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaTipoSolicitante
prorrogaXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependencia <- merge(x = cantXDependencia, y = prorrogaXDependencia, by='dependencia')
propCProrrogaDependencia <- combinacionDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaDependencia
prorrogaXTipoSolicitante <- acceso_info_publica %>% group_by(tipo_solicitante) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionTipoSolicitante <- merge(x = cantXTipoSolicitante, y = prorrogaXTipoSolicitante, by='tipo_solicitante')
propCProrrogaTipoSolicitante <- combinacionTipoSolicitante %>% group_by(tipo_solicitante) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal = cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaTipoSolicitante
prorrogaXDependenciaMinisterio<- acceso_info_publica %>% group_by(dependencia_ministerio) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionDependenciaMinisterio <- merge(x = cantXDependenciaMinisterio, y = prorrogaXDependenciaMinisterio, by='dependencia_ministerio')
propCProrrogaDependenciaMinisterio <- combinacionDependenciaMinisterio %>% group_by(dependencia_ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal= cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaDependenciaMinisterio
prorrogaXMinisterio<- acceso_info_publica %>% group_by(ministerio) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacioMinisterio <- merge(x = cantXMinisterio, y = prorrogaXMinisterio, by='ministerio')
propCProrrogaMinisterio <- combinacionMinisterio %>% group_by(ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal= cantidad.x) %>% arrange(-incumplimiento)
prorrogaXMinisterio<- acceso_info_publica %>% group_by(ministerio) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionMinisterio <- merge(x = cantXMinisterio, y = prorrogaXMinisterio, by='ministerio')
propCProrrogaMinisterio <- combinacionMinisterio %>% group_by(ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal= cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaMinisterio
prorrogaXCalidadRespuesta<- acceso_info_publica %>% group_by(calidad_respuesta) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionCalidadRespuesta <- merge(x = cantXCalidadRespuesta, y = prorrogaXCalidadRespuesta, by='calidad_respuesta')
propCProrrogaCalidadRespuesta <- combinacionCalidadRespuesta %>% group_by(calidad_respuesta) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal= cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaCalidadRespuesta
prorrogaXCategoriaTema <- acceso_info_publica %>% group_by(categoria_tema) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionCategoriaTema <- merge(x = cantXCategoriaTema, y = prorrogaXCategoriaTema, by='categoria_tema')
propCProrrogaCategoriaTema <- combinacionCategoriaTema %>% group_by(categoria_tema) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal= cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaCategoriaTema
#3.7 Requirieron prorroga por calidad respuesta especifico
prorrogaXCategoriaTemaEspecifico <- acceso_info_publica %>% group_by(categoria_tema_especifico) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionCategoriaTemaEspecifico <- merge(x = cantXCategoriaTemaEspecifico, y = prorrogaXCategoriaTemaEspecifico, by='categoria_tema_especifico')
prorrogaXCategoriaTemaEspecifico <- acceso_info_publica %>% group_by(categoria_tema_especifico) %>% filter(prorroga=='SI') %>% summarise(cantidad = n())
combinacionCategoriaTemaEspecifico <- merge(x = cantXCatTemaEspecifico, y = prorrogaXCategoriaTemaEspecifico, by='categoria_tema_especifico')
propCProrrogaCategoriaTemaEspecifico <- combinacionCategoriaTemaEspecifico %>% group_by(categoria_tema_especifico) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal= cantidad.x) %>% arrange(-incumplimiento)
propCProrrogaCategoriaTemaEspecifico
completitudXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(calidad_respuesta=='PARCIAL', calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudDependencia <- merge(x = cantXDependencia, y = completitudXDependencia, by='dependencia')
propCCompletitudDependencia <- combinacionCDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
completitudXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(calidad_respuesta=='PARCIAL', calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudDependencia <- merge(x = cantXDependencia, y = completitudXDependencia, by='dependencia')
propCCompletitudDependencia <- completitudDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudDependencia
completitudXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(calidad_respuesta=='PARCIAL') %>% summarise(cantidad = n())
completitudDependencia <- merge(x = cantXDependencia, y = completitudXDependencia, by='dependencia')
propCCompletitudDependencia <- completitudDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudDependencia
completitudXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudDependencia <- merge(x = cantXDependencia, y = completitudXDependencia, by='dependencia')
propCCompletitudDependencia <- completitudDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudDependencia
completitudXTipoSolicitante <- acceso_info_publica %>% group_by(tipo_solicitante) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudTipoSolicitante <- merge(x = cantXTipoSolicitante, y = completitudXTipoSolicitante, by='tipo_solicitante')
propCCompletitudTipoSolicitante<- completitudTipoSolicitante %>% group_by(tipo_solicitante) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudTipoSolicitante
completitudXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudDependencia <- merge(x = cantXDependencia, y = completitudXDependencia, by='dependencia')
propCCompletitudDependencia <- completitudDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudDependencia
completitudXDependencia <- acceso_info_publica %>% group_by(dependencia) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudDependencia <- merge(x = cantXDependencia, y = completitudXDependencia, by='dependencia')
propCCompletitudDependencia <- completitudDependencia %>% group_by(dependencia) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudDependencia
completitudXTipoSolicitante <- acceso_info_publica %>% group_by(tipo_solicitante) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudTipoSolicitante <- merge(x = cantXTipoSolicitante, y = completitudXTipoSolicitante, by='tipo_solicitante')
propCCompletitudTipoSolicitante<- completitudTipoSolicitante %>% group_by(tipo_solicitante) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudTipoSolicitante
completitudXDependenciaMinisterio <- acceso_info_publica %>% group_by(dependencia_ministerio) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudDependenciaMinisterio <- merge(x = cantXDependenciaMinisterio, y = completitudXDependenciaMinisterio, by='dependencia_ministerio')
propCCompletitudDependenciaMinisterio<- completitudDependenciaMinisterio %>% group_by(dependencia_ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudDependenciaMinisterio
completitudXinisterio <- acceso_info_publica %>% group_by(ministerio) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudMinisterio <- merge(x = cantXMinisterio, y = completitudXMinisterio, by='ministerio')
completitudXMinisterio <- acceso_info_publica %>% group_by(ministerio) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudMinisterio <- merge(x = cantXMinisterio, y = completitudXMinisterio, by='ministerio')
propCCompletitudMinisterio<- completitudMinisterio %>% group_by(ministerio) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudMinisterio
completitudXCategoriaTema<- acceso_info_publica %>% group_by(categoria_tema) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudCategoriaTema <- merge(x = cantXCategoriaTema, y = completitudXCategoriaTema, by='categoria_tema')
propCCompletitudCategoriaTema<- completitudCategoriaTema %>% group_by(categoria_tema) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudCategoriaTema
#4.6 Completitud por cateogira tema especifico
completitudXCategoriaTemaEspecifico<- acceso_info_publica %>% group_by(categoria_tema_especifico) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudCategoriaTemaEspecifico <- merge(x = cantXCategoriaTemaEspecifico, y = completitudXCategoriaTemaEspecifico, by='categoria_tema_especifico')
#4.6 Completitud por cateogira tema especifico
completitudXCategoriaTemaEspecifico<- acceso_info_publica %>% group_by(categoria_tema_especifico) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudCategoriaTemaEspecifico <- merge(x = cantXCategoriaTemaEspecifico, y = completitudXCategoriaTemaEspecifico, by='categoria_tema_especifico')
completitudXCategoriaTemaEspecifico<- acceso_info_publica %>% group_by(categoria_tema_especifico) %>% filter(calidad_respuesta=='PARCIAL' | calidad_respuesta=='DENEGATORIA INFUNDADA') %>% summarise(cantidad = n())
completitudCategoriaTemaEspecifico <- merge(x = cantXCatTemaEspecifico, y = completitudXCategoriaTemaEspecifico, by='categoria_tema_especifico')
propCCompletitudCategoriaTemaEspecifico<- completitudCategoriaTemaEspecifico %>% group_by(categoria_tema_especifico) %>% summarise(incumplimiento = cantidad.y / cantidad.x, cantTotal=cantidad.x) %>% arrange(-incumplimiento)
propCCompletitudCategoriaTemaEspecifico
setwd("~/Desktop/Analitica Descriptiva/Trabajo Practico")
colnames(acceso_info_publica)
class(acceso_info_publica)
columnas <- ncol(acceso_info_publica)
for(i in 1:columnas){
class(acceso_info_publica[,i])
}
tipos <- c()
for(i in 1:columnas){
clase <- append(clase, class(acceso_info_publica[,i]))
}
tipos <- c()
for(i in 1:columnas){
tipos <- append(tipos, class(acceso_info_publica[,i]))
}
tipos
tipos <- c()
for(i in 1:columnas){
tipos <- append(tipos, class(acceso_info_publica[i,]))
}
tipos
sapply(acceso_info_publica)
sapply(acceso_info_publica, class)
POSIXct(acceso_info_publica$fecha_respuesta)
acceso_info_publica$fecha <- as.Date(as.yearmon(as.character(acceso_info_publica$date), "%Y%m%d"))
library(zoo)
for (i in 1:length(acceso_info_publica$fecha)){
date = acceso_info_publica$fecha[i]
d = as.Date(as.yearmon(as.character(date),'%Y%m%d'))
acceso_info_publica$fecha[i] = d
}
for (i in 1:length(acceso_info_publica$fecha)){
date = acceso_info_publica$fecha[i]
d = as.Date(date, format='%Y-%m-%d')
acceso_info_publica$fecha[i] = d
}
sapply(acceso_info_publica, class)
class(acceso_info_publica$fecha)
for (i in 1:nrow(acceso_info_publica$fecha)){
date = acceso_info_publica$fecha[i]
d = as.Date(date, format='%Y-%m-%d')
acceso_info_publica$fecha[i] = d
}
for (i in 1:nrow(acceso_info_publica)){
date = acceso_info_publica$fecha[i]
d = as.Date(date, format='%Y-%m-%d')
acceso_info_publica$fecha[i] = d
}
class(acceso_info_publica)
class(acceso_info_publica$fecha)
for (i in 1:nrow(acceso_info_publica)){
date = acceso_info_publica$fecha[i]
d = as.Date(date, format='%Y-%m-%d')
acceso_info_publica$fecha[i] = d
}
for (i in 1:nrow(acceso_info_publica)){
date = acceso_info_publica$fecha[i]
d = as.Date(date, format='%Y-%m-%d')
acceso_info_publica$fecha[i] = d
class(acceso_info_publica$fecha[i])
}
for (i in 1:nrow(acceso_info_publica)){
date = acceso_info_publica$fecha[i]
d = as.Date(date, format='%Y-%m-%d')
acceso_info_publica$fecha[i] = d
clase <- class(acceso_info_publica$fecha[i])
clase
}
for (i in 1:nrow(acceso_info_publica)){
date = acceso_info_publica$fecha[i]
d = as.Date(date, format='%Y-%m-%d')
acceso_info_publica$fecha[i] = d
class(acceso_info_publica$fecha[i])
}
for (i in 1:nrow(acceso_info_publica)){
date = acceso_info_publica$fecha[i]
d = as.Date(date, format='%Y-%m-%d')
acceso_info_publica$fecha[i] = d
print(class(acceso_info_publica$fecha[i]))
}
acceso_info_publica$fecha <- as.POSIXct(acceso_info_publica$fecha,
format = "%Y-%m-%d %H:%M:%S")
sapply(acceso_info_publica, class)
acceso_info_publica$fecha[1] < acceso_info_publica$fecha[2]
acceso_info_publica$fecha <- as.Date(acceso_info_publica$fecha,
format = "%d/%m/%Y")
sapply(acceso_info_publica, class)
acceso_info_publica$vencimiento_1 <- as.Date(acceso_info_publica$fecha,
format = "%d/%m/%Y")
acceso_info_publica$vencimiento_1 <- as.Date(acceso_info_publica$vencimiento_1,
format = "%d/%m/%Y")
sapply(acceso_info_publica, class)
library(tidyverse)
acceso_info_publica <- read_delim("~/Desktop/Analitica Descriptiva/Trabajo Practico/acceso_info_publica.csv"  , delim = ';')
acceso_info_publica$fecha <- as.Date(acceso_info_publica$fecha,
format = "%d/%m/%Y")
acceso_info_publica$vencimiento_1 <- as.Date(acceso_info_publica$vencimiento_1,
format = "%d/%m/%Y")
acceso_info_publica$vencimiento_2 <- as.Date(acceso_info_publica$vencimiento_2,
format = "%d/%m/%Y")
sapply(acceso_info_publica, class)
acceso_info_publica$fecha <- as.Date(acceso_info_publica$fecha,
format = "%d/%m/%Y")
acceso_info_publica$vencimiento_1 <- as.Date(acceso_info_publica$vencimiento_1,
format = "%d/%m/%Y")
acceso_info_publica$vencimiento_2 <- as.Date(acceso_info_publica$vencimiento_2,
format = "%d/%m/%Y")
acceso_info_publica$fecha_respuesta <- as.Date(acceso_info_publica$fecha_respuesta,
format = "%d/%m/%Y")
sapply(acceso_info_publica, class)
---
title: "Relacion entre Variables"
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
x1=seq(100)+rnorm(100,mean = 0,sd=10)
x2=200+seq(100)+rnorm(100,mean = 2,sd=10)
p=(exp(5+0.8*x1-0.15*x2)/(1+exp(5+0.8*x1-0.15*x2)))+runif(n = 100,min = -0.5,max = 0.5)
z=seq(length(p))
for (i in seq(length(p))) {
if (p[i]>0.5){
z[i]=1
}else{
z[i]=0
}
}
y<-200+0.75*x1-1.5*x2+0.15*z +rnorm(100,mean = 0,sd=5)
ggplot(df,aes(x = x1, y = y)) + geom_point()+ ggtitle(" Scatter plot")
df= cbind(x1,x2,z,y)
df=as.data.frame(df)
summary(df)
ggplot(df,aes(x = x1, y = y)) + geom_point()+ ggtitle(" Scatter plot")
knitr::opts_chunk$set(echo = TRUE)
for (i in seq(length(p))) {
if (p[i]>0.5){
z[i]=1
}else{
z[i]=0
}
}
y<-200+0.75*x1-1.5*x2+0.15*z +rnorm(100,mean = 0,sd=5)
library(ggplot2)
x1=seq(100)+rnorm(100,mean = 0,sd=10)
x2=200+seq(100)+rnorm(100,mean = 2,sd=10)
p=(exp(5+0.8*x1-0.15*x2)/(1+exp(5+0.8*x1-0.15*x2)))+runif(n = 100,min = -0.5,max = 0.5)
z=seq(length(p))
for (i in seq(length(p))) {
if (p[i]>0.5){
z[i]=1
}else{
z[i]=0
}
}
y<-200+0.75*x1-1.5*x2+0.15*z +rnorm(100,mean = 0,sd=5)
library(ggplot2)
x1=seq(100)+rnorm(100,mean = 0,sd=10)
x2=200+seq(100)+rnorm(100,mean = 2,sd=10)
p=(exp(5+0.8*x1-0.15*x2)/(1+exp(5+0.8*x1-0.15*x2)))+runif(n = 100,min = -0.5,max = 0.5)
z=seq(length(p))
for (i in seq(length(p))) {
if (p[i]>0.5){
z[i]=1
}else{
z[i]=0
}
}
y<-200+0.75*x1-1.5*x2+0.15*z +rnorm(100,mean = 0,sd=5)
library(ggplot2)
x1=seq(100)+rnorm(100,mean = 0,sd=10)
x2=200+seq(100)+rnorm(100,mean = 2,sd=10)
p=(exp(5+0.8*x1-0.15*x2)/(1+exp(5+0.8*x1-0.15*x2)))+runif(n = 100,min = -0.5,max = 0.5)
z=seq(length(p))
for (i in seq(length(p))) {
if (p[i]>0.5){
z[i]=1
}else{
z[i]=0
}
}
y<-200+0.75*x1-1.5*x2+0.15*z +rnorm(100,mean = 0,sd=5)
df= cbind(x1,x2,z,y)
df=as.data.frame(df)
summary(df)
ggplot(df,aes(x = x1, y = y)) + geom_point()+ ggtitle(" Scatter plot")
ggplot(df,aes(x = x2, y = y)) + geom_point()+ ggtitle(" Scatter plot")
ggplot(df,aes(x = x1, y = y)) + geom_point()+ ggtitle(" Scatter plot")
ggplot(df,aes(x = z, y = y)) + geom_point()+ ggtitle(" Scatter plot")
dff$y[5]=NA
plot(y)
hist(y)
dff=df
dff$y[5]=NA
dff$y[50]=NA
dff$y[100]=NA
dff$y[90]=5000
c(dff$y[5],dff$y[50],dff$y[90],dff$y[100])
media=mean(dff$y,na.rm = TRUE)
dff$y[5]=media
dff$y[50]=media
dff$y[100]=media
mm=data.frame(
"termino" = c("Media","dato_real"),
"id_5" = c(media,df$y[5]),
"id_50" = c(media,df$y[50]),
"id_100" = c(media,df$y[100]))
mm
table(df$z)
sum(dff$z,na.rm = TRUE)/length(df$z)
dff$z[15]=NA
dff$z[25]=NA
dff$z[75]=NA
frec=sum(dff$z,na.rm = TRUE)/length(dff$z)
input=0
if (frec>0.5){
input=1
} else{
input=0
}
mm=data.frame(
"termino" = c("frecuencia","inputacion","dato_real"),
"id_15" = c(frec,input,df$z[10]),
"id_25" = c(frec,input,df$z[25]),
"id_75" = c(frec,input,df$z[75]))
mm
library(ggplot2)
x<-seq(100)+rnorm(100,mean = 0,sd=10)
y<-200+0.75*x+rnorm(100,mean = 0,sd=5)
df= cbind(x,y)
df=as.data.frame(df)
ggplot(df,aes(x = x, y = y)) + geom_point()+ ggtitle(" Scatter plot")
x<-seq(-50,49)+rnorm(100,mean = 0,sd=10)
y<-10*x+20*x^2+x^3-8+rnorm(100,mean = 0,sd=50)
df= cbind(x,y)
df=as.data.frame(df)
ggplot(df,aes(x = x, y = y)) + geom_point()+ ggtitle(" Scatter plot")
cor(x,y)
cor(x, y, method = "spearman")
x1<-seq(50)+rnorm(50,mean = 0,sd=10)
x2=rep(51)+rnorm(1,mean = 0,sd=10)
x3<-seq(52,100)+rnorm(49,mean = 0,sd=10)
x=c(x1, x2,x3)
plot(x)
y1<-2+0.8*x1+rnorm(length(x1),mean = 0,sd=5)
y2<-20+8*x2+rnorm(length(x2),mean = 100,sd=10) ### Aca se introduce el outlier
y3<-2+0.8*x3+rnorm(length(x3),mean = 0,sd=5)
y=c(y1,y2,y3)
df= cbind(x,y)
df=as.data.frame(df)
ggplot(df,aes(x = x, y = y)) + geom_point()+ ggtitle(" Scatter plot")
cor(x,y)
cor(x, y, method = "spearman")
library("corrplot")
data(mtcars)
head(mtcars)
M <- cor(mtcars)  #permite ejecutar una matriz de correlación
corrplot(M, method = "ellipse")
cor(mtcars$mpg, mtcars$am)
cor(x, y, method = "spearman")
cor(mtcars)
library(readxl)
preciost <- read_excel("precios.xlsx", 2) # Este es el set de datos originales tiene algunos faltantes producto de Covid-19 y titulos muy largos
library(readxl)
preciost <- read_excel("/Users/azulmakk/Desktop/Analitica Descriptiva/Clases/precios.xlsx", 2) # Este es el set de datos originales tiene algunos faltantes producto de Covid-19 y titulos muy largos
precios <- read_excel("/Users/azulmakk/Desktop/Analitica Descriptiva/Clases/precios.xlsx", 1) # esta base es la misma que la anterior pero sacando los missings, cortando la muestra a los valores existentes y asignandole un indice a los titulos
colnames(preciost)
M <- cor(precios, method = c("spearman"), use = "complete.obs")  #permite ejecutar una matriz de correlación
corrplot(M, method = "ellipse")
Notas <- read_excel("Ejercicio.xlsx")
Notas <- read_excel("/Users/azulmakk/Desktop/Analitica Descriptiva/Clases/Ejercicio.xlsx")
head(Notas, 18)
boxplot(mtcars$mpg ~ mtcars$am, col = "gray",
main = "Millas por Galon\nsegún el tipo de transmision\n(0 = automatic, 1 = manual)")
media<-tapply(mtcars$mpg, INDEX = mtcars$am, FUN = mean)
sdv<-tapply(mtcars$mpg, INDEX = mtcars$am, FUN = sd)
media
sdv
Z=(17.14-0)/(3.833/(19)^0.5)
abs(Z)
qt(0.975,18)
media<-tapply(mtcars$mpg, INDEX = mtcars$am, FUN = mean)
sdv<-tapply(mtcars$mpg, INDEX = mtcars$am, FUN = sd)
media
sdv
test <- t.test(mtcars$mpg,mtcars$mpg) # Prueba t de Student
print(test)
cor.test(mtcars$mpg, mtcars$hp)
frec<-c(15,19)
chisq.test(frec)
qchisq(0.95,1)
fila1 <- c(81, 103, 147)
fila2 <- c(359, 326, 277)
tabla <- as.table(rbind(fila1, fila2))
dimnames(tabla) = list(Peso = c("Obeso","No obeso"),
Estado_civil = c("soltero","pareja","casado"))
tabla
chisq.test(x = tabla)
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(genero= c("F", "M"),
Horario= c("Mañana","Tarde", "Noche"))
M
plot(M, col = c("red", "blue"), main = "Genero vs.Turno")
chisq.test(M)
M <- as.table(rbind(c(81, 103, 147), c(359, 326, 277)))
dimnames(M) <- list(Obesidad= c("Obeso", "No_Obeso"),
Estado_civil= c("Soltero","Pareja", "Casado"))
M
plot(M, col = c("red", "blue"), main = "Obesidad vs.Estado Civil")
chisq.test(M)
chisq.test(x = M)$residuals
chisq.test(x = M)$stdres
solteros_casados <- M[, c(1,3)]
solteros_casados
chisq.test(solteros_casados)
library("vcd")
assocstats(solteros_casados)
summary(iris)
shapiro.test(iris$Sepal.Length)
hist(iris$Sepal.Length)
dfpred= dff[is.na(dff$z),]
dfpred
dftoprove= dff[!is.na(dff$z),]
head(dftoprove)
library(dplyr)
set.seed(1)
#create ID column
dftoprove$id <- 1:nrow(dftoprove)
#use 70% of dataset as training set and 30% as test set
train <- dftoprove %>% dplyr::sample_frac(0.70)
test  <- dplyr::anti_join(dftoprove, train, by = 'id')
train=train[,(names(train)!="id")]
test=train[,(names(train)!="id")]
logit=glm(z ~ x1 + x2 + y, data=train)
summary(logit)
test$pred=predict(object = logit,newdata = test)
test$predbin = (test$pred > 0.5) * 1
head(test)
colnames(test)
#install.packages('caret')
library(caret)
install.packages('caret')
library(caret)
#install.packages('caret')
library(caret)
which(is.na(dff$z))
dff[is.na(dff)]=predict(object = logit,newdata = dfpred)
dff$z[dff$z>0.5] = 1
dff$z[dff$z<=0.5] = 0
head(dff)
dff[c(15,25,75),]
df[c(15,25,75),]
dff$y[5]=NA
dff$y[50]=NA
dff$y[100]=NA
dff$y[90]=5000
nuevo <- dff[c(5,50,100),]
c(dff$y[5],dff$y[50],dff$y[90],dff$y[100])
predict(modelolin, newdata= nuevo)
